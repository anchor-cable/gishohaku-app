service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userID) {
      return request.auth.uid == userID;
    }

    function getUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid))
    }

    function getUserCircle(eventId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.event[eventId]
    }

    function getBook(bookID) {
      return get(/databases/$(database)/documents/books/$(bookID))
    }

    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    match /users/{userID} {
      allow read: if isAuthenticated() && isUserAuthenticated(userID);
      allow write: if isAuthenticated() && isUserAuthenticated(userID);
      allow update: if false;

      match /bookStars/{starId} {
        allow read, write: if isAuthenticated() && isUserAuthenticated(userID);
      }

      match /circleStars/{starId} {
        allow read, write: if isAuthenticated() && isUserAuthenticated(userID);
      }
    }

    match /books/{bookID} {
      allow read;
      // サークルに所属している人のみ作成可能
      allow create: if isAuthenticated()
        && getUserCircle(incomingData().eventId) != null
        && getUserCircle(incomingData().eventId) == incomingData().circle.ref;
      // 既存データのCircleRefと一致すれば更新・削除可能
      allow update, delete: if isAuthenticated()
        && getUserCircle(resource.data.eventId) != null
        && getUserCircle(resource.data.eventId) == existingData().circle.ref;
        // && existingData().circle.ref == incomingData().circle.ref;
    }

    match /bookSubmissions/{bookID} {
      allow read: if isAuthenticated()
        && getUserCircle(getBook(bookID).data.eventId) == getBook(bookID).data.circleRef;
      allow write: if false;
    }

    match /circles/{circleID} {
      allow read;
      // サークルはWeb画面で作成する機能を提供しない
      allow create: if false;
      // TODO
      allow update: if isAuthenticated()
        && getUserCircle(existingData().eventId) == resource.__name__
        && existingData().booth == incomingData().booth;
    }

    // TODO: startCountsにeventIDも入れること
    match /starCounts/{countId} {
      allow create, update;
      // 現在のチェック数を見れるのはサークル所属者のみ
      allow read: if isAuthenticated() && getUser().data.circleRef == existingData().circleRef;
    }
  }
}
